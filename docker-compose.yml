version: "3.8"

services:
  web:
    build:
      context: .
    ports:
      - "8000:8000"
    networks:
      - backend-web
    command: ["sh", "./start.sh"]
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - postgres_db

  postgres_db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${SQL_NAME}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_HOST=${HOST}
      - POSTGRES_PORT=${PORT}
    networks:
      - backend-web

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-web
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}

  nginx:
    image: nginx:latest
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    ports:
      - "80:80"
    networks:
      - backend-web
    depends_on:
      - web

  celery:
    build:
      context: .
    command: celery -A masters_guild worker -l info
    volumes:
      - .:/app
    networks:
      - backend-web
    depends_on:
      - web
      - postgres_db
      - redis
    environment:
      - DEBUG=1
      - CELERY_BROKER=${CELERY_BROKER_URL}
      - CELERY_BACKEND=${CELERY_BACKEND}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=${CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP}

networks:
  backend-web:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
